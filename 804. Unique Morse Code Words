
https://leetcode.com/problems/unique-morse-code-words/
804. Unique Morse Code Words
Easy

880

809

Add to List

Share
International Morse Code defines a standard encoding where each letter is mapped to a series of dots and dashes, as follows: "a" maps to ".-", "b" maps to "-...", "c" maps to "-.-.", and so on.

For convenience, the full table for the 26 letters of the English alphabet is given below:

[".-","-...","-.-.","-..",".","..-.","--.","....","..",".---","-.-",".-..","--","-.","---",".--.","--.-",".-.","...","-","..-","...-",".--","-..-","-.--","--.."]
Now, given a list of words, each word can be written as a concatenation of the Morse code of each letter. For example, "cab" can be written as "-.-..--...", (which is the concatenation "-.-." + ".-" + "-..."). We'll call such a concatenation, the transformation of a word.

Return the number of different transformations among all words we have.

Example:
Input: words = ["gin", "zen", "gig", "msg"]
Output: 2
Explanation: 
The transformation of each word is:
"gin" -> "--...-."
"zen" -> "--...-."
"gig" -> "--...--."
"msg" -> "--...--."

There are 2 different transformations, "--...-." and "--...--.".



class Solution {
    public int uniqueMorseRepresentations(String[] words) {
  String mosh[] = {".-","-...","-.-.","-..",".","..-.","--.","....","..",".---","-.-",".-..","--","-.","---",".--.","--.-",".-.","...","-","..-","...-",".--","-..-","-.--","--.."};
        
        int wordsLen = words.length;
        String trans[] = new String[wordsLen];
        int p=0;
        
        for(String str : words)
        {
            int len = str.length();
            String temp="";
            for(int i=0; i<len; i++)
            {
                int ascii = str.charAt(i);
                temp+=mosh[ascii%97];
            }
            trans[p++] = temp;
        }
        //System.out.println(Arrays.toString(trans));
        List<String> list = new ArrayList<>();
        for(int i=0; i<p; i++)
        {
            String temp = trans[i];
            if(!list.contains(temp))
            {
                list.add(temp);
            }
        }
        System.out.println(list);
        return list.size();
        
    }
}


