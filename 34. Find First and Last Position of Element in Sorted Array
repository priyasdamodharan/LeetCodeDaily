Given an array of integers nums sorted in non-decreasing order, find the starting and ending position of a given target value.

If target is not found in the array, return [-1, -1].

You must write an algorithm with O(log n) runtime complexity.

https://leetcode.com/problems/find-first-and-last-position-of-element-in-sorted-array/
 

Example 1:

Input: nums = [5,7,7,8,8,10], target = 8
Output: [3,4]
Example 2:

Input: nums = [5,7,7,8,8,10], target = 6
Output: [-1,-1]
Example 3:

Input: nums = [], target = 0
Output: [-1,-1]
 



Solution:

class Solution {
    public int[] searchRange(int[] nums, int target) {
       int first = search(nums,target,true); 
       int last = search(nums,target, false); 
        int a[] = { -1, -1 };

        a[0] = first;
        a[1] = last;

        return a;
    }
    
    public  static int search(int[] nums, int target, boolean searchfirst){
        int res = -1;
        int start = 0;
        int end = nums.length-1;
         while(start<=end){
             
             int mid = start + (end - start)/2;
             
             if(nums[mid] > target){
                 end = mid - 1;
             }
             
             else if (nums[mid] < target){
                 start = mid + 1;
             }
             else{
                res = mid;
                if (searchfirst) {
                    end = mid - 1;
                } else {
                    start = mid + 1;
                }
             }
         }
             return res;
    }
    
}

time: O(logn)
